<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.capstone.snowe.mapper.ReservationMapper">

    <!-- ================================= -->
    <!-- 1. 캘린더에서 날짜를 선택 -->
    <!-- 2. 맘에 드는 강사의 강습을 선택 후 예약하기-->
    <!-- ================================= -->
    <insert id="LessonReservationByDay" parameterType="com.capstone.snowe.dto.ReservationDTO">
        INSERT INTO RESERVATION(RESERVE_ID,
                                TEACHER_ID,
                                STUDENT_ID,
                                LESSON_ID,
                                RESERVE_DATE)
        SELECT
            'R' || LPAD(RESERVE_SEQ.NEXTVAL, 8, 0) AS RESERVE_ID,
            T.LOGIN_ID AS TEACHER_ID,
            #{student_id} AS STUDENT_ID,
            L.LESSON_ID AS LESSON_ID,
            SYSDATE AS RESERVE_DATE
        FROM
            LESSON L
                INNER JOIN TEACHER T
                           ON L.LOGIN_ID = T.LOGIN_ID
        WHERE
            L.LESSON_DATE > SYSDATE     -- 강습일자가 현재날짜보다 이후일때
          AND L.LESSON_STAT = 'LS01'  -- 강습 상태가 신청가능일때
          AND L.LOGIN_ID = #{teacher_id} -- 선택한 강사 아이디 가져와서
          AND L.LESSON_ID = #{lesson_id}   -- 선택한 강습의 아이디가 일치하는지
    </insert>

    <!-- ========================================= -->
    <!-- 개인정보 화면에서 본인이 예약한 예약내역 보여주기 -->
    <!-- ========================================= -->
    <select id="reservationDetail">
        SELECT
            R.RESERVE_ID AS 예약번호,
            L.LESSON_ID AS 강습번호,
            T.NAME AS 강사이름,
            M.NAME AS 수강생이름,
            R.RESERVE_DATE AS 신청일,
            L.LESSON_DATE AS 강습일,
            C.STAT AS 강습상태,
            D.DIV AS 강습구분
        FROM
            RESERVATION R
                INNER JOIN LESSON L
                           ON R.LESSON_ID = L.LESSON_ID
                INNER JOIN TEACHER T
                           ON R.TEACHER_ID = T.ID
                INNER JOIN MEMBER M
                           ON R.STUDENT_ID = M.LOGIN_ID
                INNER JOIN SKI_RESORT S
                           ON T.RESORT_ID = S.RESORT_ID
                INNER JOIN (SELECT CODE, CODE_VALUE AS STAT FROM COMMON_CODE WHERE NO = '002') C
                           ON R.LESSON_CODE = C.CODE
                INNER JOIN (SELECT CODE, CODE_VALUE AS DIV FROM COMMON_CODE WHERE NO = '004') D
                           ON L.LESSON_DIV = D.CODE
        WHERE
            STUDENT_ID = #{studentId}     -- #{LOGIN_ID} 현재 로그인중인 ID
        -- CANCLE_STAT = 'N'을 하지 않은 이유는 예약자가 본인이 취소한 예약도 볼 수 있기 때문
    </select>

    <!-- =========== -->
    <!-- 예약 취소하기 -->
    <!-- =========== -->
    <update id="cancleReservation" parameterType="com.capstone.snowe.dto.ReservationDTO">
        UPDATE
            LESSON
        SET
            RESERVE_COUNT = (SELECT COUNT(LESSON_ID) AS RESERVE_COUNT
                             FROM RESERVATION
                             WHERE LESSON_ID = #{lesson_id}
                               AND CANCEL_STAT = 'N'
                             GROUP BY LESSON_ID),
            LESSON_STAT = CASE
                              WHEN MAX_RESERVE_COUNT > RESERVE_COUNT THEN 'LS01'
                END
        WHERE LESSON_ID = #{lesson_id}
    </update>
    <!-- =========================================================== -->
    <!--            ** 예약이 취소되고 실행되어야 하는 쿼리문 **             -->
    <!--                                                              -->
    <!-- RESERVATION에서 강습 예약 취소시 LESSON테이블의 예약 인원 최신화 하기 -->
    <!-- 최대인원이 예약인원보다 클경우 LESSON_STAT를 LS01(신청가능)로 변경 -->
    <!-- =========================================================== -->
    <update id="deleteReserveCountAndLessonStat" parameterType="com.capstone.snowe.dto.ReservationDTO">
        UPDATE
            LESSON
        SET
            RESERVE_COUNT = (SELECT COUNT(LESSON_ID) AS RESERVE_COUNT
                             FROM RESERVATION
                             WHERE LESSON_ID = #{lessonId}
                               AND CANCLE_STAT = 'N'
                             GROUP BY LESSON_ID),
            LESSON_STAT = CASE
                              WHEN MAX_RESERVE_COUNT > RESERVE_COUNT THEN 'LS01'
                END
        WHERE LESSON_ID = #{lessonId}
    </update>


</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.capstone.snowe.mapper.ReservationMapper">

    <!-- ================================= -->
    <!-- 1. 캘린더에서 날짜를 선택 -->
    <!-- 2. 맘에 드는 강사의 강습을 선택 후 예약하기-->
    <!-- ================================= -->
    <insert id="LessonReservationByDay" parameterType="com.capstone.snowe.dto.ReservationDTO">
        INSERT INTO RESERVATION(RESERVE_ID,
                                TEACHER_ID,
                                STUDENT_ID,
                                LESSON_ID,
                                RESERVE_DATE,
                                RESORT_ID)
        SELECT
            'R' || LPAD(RESERVE_SEQ.NEXTVAL, 8, 0) AS RESERVE_ID,
            T.LOGIN_ID AS TEACHER_ID,
            #{studentId} AS STUDENT_ID,
            L.LESSON_ID AS LESSON_ID,
            SYSDATE AS RESERVE_DATE,
            L.RESORT_ID
        FROM
            LESSON L
                INNER JOIN TEACHER T
                           ON L.LOGIN_ID = T.LOGIN_ID
        WHERE
            L.LESSON_DATE > SYSDATE     -- 강습일자가 현재날짜보다 이후일때
          AND L.LESSON_STAT = 'LS01'  -- 강습 상태가 신청가능일때
          AND L.LESSON_ID = #{lessonId} -- 선택한 강습의 아이디가 일치하는지
    </insert>

    <!-- ========================================= -->
    <!-- 개인정보 화면에서 본인이 예약한 예약내역 보여주기 -->
    <!-- ========================================= -->
    <select id="reservationDetail" parameterType="ReservationDTO" resultType="com.capstone.snowe.dto.ReservationDTO">
        SELECT
            R.RESERVE_ID,
            L.LESSON_ID,
            T.NAME,
            L.LESSON_TITLE,
            R.RESERVE_DATE,
            L.LESSON_START,
            TO_CHAR(L.LESSON_DATE,'YYYY-MM-DD') as LESSON_DATE,
            C.LESSON_CODE,
            D.LESSON_DIV,
            R.CANCEL_STAT,
            E.RESORT_ID
        FROM
            RESERVATION R
                INNER JOIN LESSON L
                           ON R.LESSON_ID = L.LESSON_ID
                INNER JOIN TEACHER T
                           ON R.TEACHER_ID = T.login_ID
                INNER JOIN MEMBER M
                           ON R.STUDENT_ID = M.LOGIN_ID
                INNER JOIN (SELECT CODE, CODE_VALUE AS RESORT_ID FROM COMMON_CODE WHERE NO = '005') E
                           ON R.RESORT_ID = E.CODE
                INNER JOIN (SELECT CODE, CODE_VALUE AS LESSON_CODE FROM COMMON_CODE WHERE NO = '002') C
                           ON R.LESSON_CODE = C.CODE
                INNER JOIN (SELECT CODE, CODE_VALUE AS LESSON_DIV FROM COMMON_CODE WHERE NO = '004') D
                           ON L.LESSON_DIV = D.CODE
        WHERE
            STUDENT_ID = #{studentId}
            and R.CANCEL_STAT = 'N'
    </select>

    <!-- =========== -->
    <!-- 예약 취소하기 -->
    <!-- =========== -->
    <update id="cancelReservation" parameterType="com.capstone.snowe.dto.ReservationDTO">
        UPDATE
            RESERVATION
        SET
            CANCEL_STAT = 'Y',
            CANCEL_DATE = SYSDATE,
            LESSON_CODE = 'LC03'

        WHERE
            RESERVE_ID = #{reserveId}
          AND STUDENT_ID = #{studentId}
          AND CANCEL_STAT = 'N'
    </update>


    <select id="reservationListOnDate" parameterType="String" resultType="com.capstone.snowe.dto.ReservationDTO">
        select
            a.reserve_id,
            a.teacher_id,
            a.student_id,
            c.name,
            a.lesson_code,
            a.reserve_date,
            a.cancel_date,
            a.lesson_id,
            a.cancel_stat,
            b.lesson_date,
            b.lesson_title

        from reservation a
                 INNER JOIN  lesson b
                             ON a.LESSON_ID = b.LESSON_ID
                 INNER JOIN  member c
                             ON a.teacher_id = c.login_id
        where student_id = #{studentId}
          and cancel_stat = 'N'
          and b.LESSON_DATE = #{lessonDate}
    </select>
</mapper>